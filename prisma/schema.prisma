generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

// datasource db {
//   provider          = "postgresql"
//   url               = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
// }

// datasource heroku {
//   provider = "postgresql"
//   url      = "postgres://uudhktmtgdl31:p3dd09d4ce1204c65fcb09e748b027f1be2fbeb2a25c51ef51e74b072378ea793@c5p86clmevrg5s.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/dfk54j4e5ks262"
// }

datasource db {
  provider = "cockroachdb"
  url    = "postgresql://apps:fJaDhGKuGTuFXc7yURy0KQ@pingpal-production-15362.7tt.aws-us-east-1.cockroachlabs.cloud:26257/pingpal-primary?sslmode=verify-full"
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  comments   Comment[]
  workspaces Workspace[] @relation("UserToWorkspace")
}

model Workspace {
  id               String    @id @default(uuid())
  name             String
  subdomain        String?   @unique
  headerLinkId     String?   @unique
  footerMessage    String?
  showsPingpalLogo Boolean   @default(true)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tier             SubscriptionTier @default(FREE)
  stripeCustomerId String?
  stripeSubscriptionId String?

  unavailableAfter DateTime?

  footerLinks      Link[]
  services         Service[]
  headerLink       Link?     @relation("HeaderLink", fields: [headerLinkId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users            User[]    @relation("UserToWorkspace")
}

model Service {
  id             String    @id @default(uuid())
  name           String
  domain         String
  expectedText   String?
  expectedStatus Int
  method         String
  body           String?
  headers        String?
  maxLatency     Int
  checkInterval  Int
  lastCheck      DateTime  @default(now())
  workspaceId    String

  active         Boolean   @default(true)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  sort           Int?

  failures       Failure[]
  hits           Hit[]
  outages        Outage[]
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Hit {
  id        String   @id @default(uuid())
  latency   Int
  serviceId String
  createdAt DateTime @default(now())
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Failure {
  id                   String        @id @default(uuid())
  status               Int?
  headers              String?
  body                 String?
  latency              Int?
  autogeneratedMessage String
  reason               FailureReason
  collectBody          Boolean       @default(false)
  collectHeaders       Boolean       @default(false)
  serviceId            String
  outageId             String?
  createdAt            DateTime      @default(now())
  outage               Outage?       @relation(fields: [outageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service              Service       @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Outage {
  id        String       @id @default(uuid())
  status    OutageStatus @default(OPEN)
  serviceId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  comments  Comment[]
  failures  Failure[]
  service   Service      @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  outageId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outage    Outage   @relation(fields: [outageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Link {
  id                  String     @id @default(uuid())
  text                String
  url                 String
  icon                Icon?
  footerWorkspaceId   String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  footerWorkspace     Workspace? @relation(fields: [footerWorkspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  headerLinkWorkspace Workspace? @relation("HeaderLink")
}

enum Icon {
  GITHUB
  TWITTER
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  DISCORD
  SLACK
  PHONE
  EMAIL
  WEBSITE
  BLOG
  PAYMENT
  BTC
  ETH
  DRIBBBLE
}

enum OutageStatus {
  OPEN
  CLOSED
}

enum Role {
  OWNER
  ADMIN
  DEV
}

enum FailureReason {
  STATUS_CODE
  REQUEST_FAILURE
  EXPECTED_TEXT
  LATENCY
  NO_RESPONSE
}

enum SubscriptionTier {
  FREE
  LAUNCH
  PRO
}