// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  previewFeatures = ["metrics"]
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role Role @default(OWNER)
  workspaces Workspace[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id String @id @default(uuid())
  name String
  users User[]
  services Service[]

  subdomain String? @unique

  footerLinks Link[]
  headerLinkId String? @unique
  headerLink Link? @relation(name: "HeaderLink", fields: [headerLinkId], references: [id])

  footerMessage String?

  showsPingpalLogo Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id String @id @default(uuid())
  name String
  domain String

  expectedText String?
  expectedStatus Int

  method String
  body String?
  headers String? @db.Text
  maxLatency Int

  checkInterval Int
  lastCheck DateTime @default(now())

  workspaceId String
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  hits Hit[]
  failures Failure[]

  outages Outage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hit {
  id String @id @default(uuid())
  latency Int

  serviceId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Failure {
  id String @id @default(uuid())
  status Int?
  headers String? @db.Text
  body String? @db.Text
  latency Int?

  autogeneratedMessage String
  reason FailureReason

  collectBody Boolean @default(false)
  collectHeaders Boolean @default(false)

  serviceId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  outageId String?
  outage Outage? @relation(fields: [outageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Outage {
  id String @id @default(uuid())
  status OutageStatus @default(OPEN)

  serviceId String
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  failures Failure[]

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())
  text String @db.Text

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  outageId String
  outage Outage @relation(fields: [outageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Link {
  id String @id @default(uuid())
  text String
  url String
  icon Icon?

  footerWorkspaceId String?
  footerWorkspace Workspace? @relation(fields: [footerWorkspaceId], references: [id], onDelete: Cascade)
  headerLinkWorkspace Workspace? @relation(name: "HeaderLink")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Icon {
  GITHUB
  TWITTER
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  DISCORD
  SLACK
  PHONE
  EMAIL
  WEBSITE
  BLOG
  PAYMENT
  BTC
  ETH
  DRIBBBLE
}

enum OutageStatus {
  OPEN
  CLOSED
}

enum Role {
  OWNER
  ADMIN
  DEV
}

enum FailureReason {
  STATUS_CODE
  REQUEST_FAILURE
  EXPECTED_TEXT
  LATENCY
  NO_RESPONSE
}